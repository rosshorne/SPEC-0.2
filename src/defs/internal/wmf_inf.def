#include "../bisim.def".

rep 0 P P.
rep (s X) P (par P Q) :=
  rep X P Q.

agent_A_def Proc := 
  Proc = 
  (A\B\S\Kas\T\
   (nu kab\
     outp S (pr A (en (pr T (pr B kab)) Kas)) zero
   )
  ).

agent_B_def Proc :=
  Proc = 
  (A\B\Kbs\T\
   ( 
    inp B (x\
    case x Kbs (m\
      let m (u\ v\ 
       let v (s\ t\
        match A s (
         match T u (outp B B zero)
        )
       )
     )
    )
    )
   )
 ).

agent_S_def Proc :=
 Proc = 
 (A\B\S\Kas\Kbs\T\
 (
  inp S (x\
  let x (x1\x2\
   match A x1 (
   case x2 Kas (m\
   let m (m1\m2\
   let m2 (n1\n2\
   match B n1 (
   match T m1 (
   outp B (en (pr T (pr A n2)) Kbs) zero
 )))))))))).

agent_System_def Proc :=
 agent_S_def ProcS,
 agent_A_def ProcA,
 agent_B_def ProcB, 
 (
   nabla A\ nabla B\ nabla S\ nabla T\ nabla kas\ nabla kbs\
   rep (s 0) (ProcS A B S kas kbs T) (PS A B S kas kbs T),
   rep (s 0) (ProcB A B kbs T) (PB A B kbs T),
   rep (s 0) (ProcA A B S kas T) (PA A B S kas T)
 ),
 Proc = (A\B\S\T\ 
  (nu kas\ nu kbs\
   par ((PS A B S kas kbs T))
   (par ((PB A B kbs T)) ((PA A B S kas T)))
  )
 ).

agent_ASpec_def Proc := 
  Proc = 
  (A\B\S\Kas\T\kab\
     outp S (pr A (en (pr T (pr B kab)) Kas)) zero
  ).


agent_SystemSpec_def Proc :=
 agent_S_def ProcS,
 agent_ASpec_def ProcA,
 agent_B_def ProcB, 
 (
   nabla A\ nabla B\ nabla S\ nabla T\ nabla kas\ nabla kbs\
   rep (s 0) (ProcS A B S kas kbs T) (PS A B S kas kbs T),
   rep (s 0) (ProcB A B kbs T) (PB A B kbs T),
   rep (s 0) (ProcA A B S kas T (ct m)) (PA A B S kas T)
 ),
 Proc = (A\B\S\T\ 
  (nu kas\ nu kbs\
   par (PS A B S kas kbs T) 
   (par (PB A B kbs T) (PA A B S kas T))
  )
 ).

check_bisim :=
 agent_System_def System, 
 agent_SystemSpec_def SystemSpec,
 H = nil,
 P = (System (ct a) (ct a) (ct a) (ct tt)),
 Q = (SystemSpec (ct a) (ct a) (ct a) (ct tt)),
  println "Checking bisimulation for: ",
  print "- history: ", print_bitrace H, println " ",
  print "- P: ", print_proc P, println " ",
  print "- Q: ", print_proc Q, println " ", 
 bisim H P Q.


#assert(check_bisim).
