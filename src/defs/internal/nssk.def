% Needham-Schroeder symmetric key protocol. 
% This example is imported from the same example in the SBC tool. 

#include "../bisim.def".

% Original: 
% agent A(agent_A, agent_B, agent_S, kas, minusone) = 
% (^na)
% 'agent_S<<agent_A, <agent_B, na>>>.
% agent_A(x_1).
% {(* 3 tests *)
%  [agent_B = fst(snd(dec(x_1, kas)))] /\ 
%  [na = fst(dec(x_1, kas))] /\ 
%  wff(snd(snd(snd(dec(x_1, kas)))))
% }
% 'agent_B<snd(snd(snd(dec(x_1, kas))))>.
% agent_A(x_3).
% {(* 1 test *)
%  wff(dec(x_3, fst(snd(snd(dec(x_1, kas))))))
% }
% 'agent_B<enc(<minusone, dec(x_3, fst(snd(snd(dec(x_1, kas)))))>, fst(snd(snd(dec(x_1, kas)))))>.0

agent_A_def P :=
P = (A\ B\ S\ kas\ minusone\ 
nu na\
outp S (pr A (pr B na)) (
inp A (x1\
case x1 kas (m\
let m (m1\m2\
let m2 (n1\n2\
match B n1 (
match na m1 (
let n2 (u1\u2\
outp B u2 (
inp A (x3\
case x3 u1 (s\
outp B (en (pr minusone s) u1) zero
)))))))))))).



% agent B(agent_A, agent_B, kbs, minusone) = 
% (^nb)
% agent_B(x_2).
% {(* 1 test *)
%  [agent_A = snd(dec(x_2, kbs))]
% }
% 'agent_A<enc(nb, fst(dec(x_2, kbs)))>.
% agent_B(x_4).
% {(* 2 tests *)
%  [minusone = fst(dec(x_4, fst(dec(x_2, kbs))))] /\ 
%  [nb = snd(dec(x_4, fst(dec(x_2, kbs))))]}
% 'agent_B

agent_B_def P :=
P = (A\ B\ kbs\ minusone\
nu nb\
inp B (x2\
case x2 kbs (m\
let m (m1\m2\
match A m2 (
outp A (en nb m1) (
inp B (x4\
case x4 m1 (n\
let n (n1\n2\
match minusone n1 (
match nb n2 (
outp B B zero
))))))))))).


% agent S(agent_A, agent_B, agent_S, kas, kbs) = 
% (^kab)
% agent_S(x_0).
% {(* 2 tests *)
%  [agent_A = fst(x_0)] /\ 
%  [agent_B = fst(snd(x_0))]
% }
% 'agent_A<enc(<snd(snd(x_0)), <agent_B, <kab, enc(<kab, agent_A>, kbs)>>>, kas)>.0

agent_S_def P :=
P = (A\ B\ S\ kas\ kbs\
nu kab\
inp S (x0\
let x0 (x1\x2\
let x2 (y1\y2\ 
match A x1 (
match B y1 (
outp A (en (pr y2 (pr B (pr kab (en (pr kab A) kbs)))) kas) zero
)))))).

% agent System(agent_A, agent_B, agent_S, minusone) = 
% (^kas, kbs)
% (S(agent_A, agent_B, agent_S, kas, kbs) | 
%  B(agent_A, agent_B, kbs, minusone) | 
%  A(agent_A, agent_B, agent_S, kas, minusone))

agent_System_def P := 
agent_A_def ProcA,
agent_B_def ProcB,
agent_S_def ProcS, 
P = (A\ B\ S\ minusone\
nu kas\ nu kbs\
par (ProcS A B S kas kbs) (
par (ProcB A B kbs minusone) 
    (ProcA A B S kas minusone)
)).


% agent ASpec(agent_A, agent_B, agent_S, kab, kas, minusone) = 
% (^na)
% 'agent_S<<agent_A, <agent_B, na>>>.
% agent_A(x_1).
% {(* 3 tests *)
%  [agent_B = fst(snd(dec(x_1, kas)))] /\ 
%  [kab = fst(snd(snd(dec(x_1, kas))))] /\ 
%  [na = fst(dec(x_1, kas))]}
% 'agent_B<snd(snd(snd(dec(x_1, kas))))>.
% agent_A(x_3).
% {(* 2 tests *)
%  wff(snd(snd(snd(dec(x_1, kas))))) /\ 
%  wff(dec(x_3, kab))
% }
% 'agent_B<enc(<minusone, dec(x_3, kab)>, kab)>.0


agent_ASpec_def P :=
P = (A\ B\ S\ kab\ kas\ minusone\ 
nu na\
outp S (pr A (pr B na)) (
inp A (x1\
case x1 kas (m\ 
let m (m1\m2\
let m2 (n1\n2\ 
let n2 (u1\ u2\
match B n1 (
match kab u1 (
match na m1 (
outp B u2 (
inp A (x3\
case x3 kab (r\
outp B (en (pr minusone r) kab) zero
))))))))))))).

% agent BSpec(agent_A, agent_B, kab, kbs, minusone) = 
% (^nb)
% agent_B(x_2).
% {(* 2 tests *)
%  [agent_A = snd(dec(x_2, kbs))] /\ 
%  [kab = fst(dec(x_2, kbs))]
% }
% 'agent_A<enc(nb, kab)>.
% agent_B(x_4).
% {(* 2 tests *)
%  [minusone = fst(dec(x_4, kab))] /\ [nb = snd(dec(x_4, kab))]}
% 'agent_B

agent_BSpec_def P :=
P = (A\ B\ kab\ kbs\ minusone\
nu nb\
inp B (x2\
case x2 kbs (m\
let m (m1\m2\
match A m2 (
match kab m1 (
outp A (en nb kab) (
inp B (x4\
case x4 kab (n\ 
let n (n1\n2\
match minusone n1 (
match nb n2 (
outp B B zero
)))))))))))).

% agent SSpec(agent_A, agent_B, agent_S, kab, kas, kbs) = 
% agent_S(x_0).
% {(* 2 tests *)
%   [agent_A = fst(x_0)] /\ [agent_B = fst(snd(x_0))]
% }
% 'agent_A<enc(<snd(snd(x_0)), <agent_B, <kab, enc(<kab, agent_A>, kbs)>>>, kas)>.0


agent_SSpec_def P :=
P = (A\ B\ S\ kab\ kas\ kbs\
inp S (x0\
let x0 (y1\ y2\
let y2 (z1\ z2\
match A y1 (
match B z1 (
outp A (en (pr z2 (pr B (pr kab (en (pr kab A) kbs)))) kas) zero
)))))).


% agent SystemSpec(agent_A, agent_B, agent_S, minusone) = 
% (^kas, kbs, kab)
% (SSpec(agent_A, agent_B, agent_S, kab, kas, kbs) | 
%  BSpec(agent_A, agent_B, kab, kbs, minusone) | 
%  ASpec(agent_A, agent_B, agent_S, kab, kas, minusone))

agent_SystemSpec_def P :=
agent_ASpec_def ProcA,
agent_BSpec_def ProcB,
agent_SSpec_def ProcS, 
P = (A\ B\ S\ minusone\
nu kas\ nu kbs\ nu kab\
par (ProcS A B S kab kas kbs) (
par (ProcB A B kab kbs minusone) 
    (ProcA A B S kab kas minusone)
)). 

% sbisim System(agent_A, agent_B, agent_S, minusone) SystemSpec(agent_A, agent_B, agent_S, minusone) with (agent_A, agent_B, agent_S, minusone)


check_bisim :=
  agent_System_def System,
  agent_SystemSpec_def SystemSpec,
  H = nil, 
  P = (System (ct agent_A) (ct agent_B) (ct agent_S) (ct minusone)),
  Q = (SystemSpec (ct agent_A) (ct agent_B) (ct agent_S) (ct minusone)),
  println "Checking bisimulation for: ",
  print "- history: ", print_bitrace H, println " ",
  print "- P: ", print_proc P, println " ",
  print "- Q: ", print_proc Q, println " ", 
  bisim H P Q.


#assert(check_bisim).
