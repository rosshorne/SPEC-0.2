#include "defs/obsthy.def".

% Tests 

Type a name.
Type b name.
Type c name.
Type d name.
Type k name.
Type m name.
Type n name.
Type x name.

Define thyex : nat -> list thy_pair -> prop
by

thyex 1 Thy :=
  P1 = mp (pr (nm a) (nm b)) (pr (nm a) (nm b)) /\
  P2 = mp (en (nm m) (nm a)) (en (nm n) (nm a)) /\
  P3 = mp (en (nm m) (nm k)) (en (nm n) (nm k)) /\
  Thy = (cons P1 (cons P2 (cons P3 nil))) ;

thyex 2 Thy :=
  P1 = mp (pr (nm a) (nm b)) (pr (nm c) (nm d)) /\
  P2 = mp (en (nm a) (nm k)) (en (nm d) (nm k)) /\
  Thy = cons P1 (cons P2 nil) ;

thyex 3 Thy :=
  P1 = mp (pr (nm a) (nm b)) (pr (nm c) (nm d)) /\
  P2 = mp (en (nm a) (nm k)) (en (nm d) (nm k)) /\
  P3 = mp (nm k) (nm k) /\ 
  Thy = cons P1 (cons P2 (cons P3 nil)) ;

thyex 4 Thy := 
  Thy = (cons (mp (nm a) (nm a)) 
        (cons (mp (var x) (var x))
        (cons (mp (en (var x) (nm k)) (en (nm a) (nm k)))
        (cons (mp (nm k) (nm k)) nil))));

thyex 5 Thy :=
  P1 = mp (pr (nm a) (nm b)) (pr (nm a) (nm b)) /\
  P2 = mp (aen (nm m) (pub (nm a))) (aen (nm n) (pub(nm a))) /\
  P3 = mp (aen (nm m) (pub (nm k))) (aen (nm n) (pub(nm k))) /\
  Thy = (cons P1 (cons P2 (cons P3 nil)));

thyex 6 Thy :=
  P1 = mp (pr (nm a) (nm b)) (pr (nm c) (nm d)) /\
  P2 = mp (aen (nm a) (nm k)) (aen (nm d) (nm k)) /\
  Thy = cons P1 (cons P2 nil);

thyex 7 Thy :=
  P1 = mp (pr (nm a) (nm b)) (pr (nm c) (nm d)) /\
  P2 = mp (aen (nm a) (pub (nm k))) (aen (nm d) (pub (nm k))) /\
  Thy = cons P1 (cons P2 nil);

thyex 8 Thy :=
  P1 = mp (pr (nm a) (nm b)) (pr (nm c) (nm d)) /\
  P2 = mp (aen (nm a) (pub (nm k))) (aen (nm d) (pub (nm k))) /\
  P3 = mp (nm k) (nm k) /\
  Thy = cons P1 (cons P2 (cons P3 nil));

thyex 9 Thy := 
  Thy = (cons (mp (nm a) (nm a)) 
        (cons (mp (var x) (var x))
        (cons (mp (aen (var x) (pub (nm k))) (aen (nm a) (pub (nm k))))
        (cons (mp (nm k) (nm k)) nil)))).

Define test_cons : nat -> prop
by

test_cons N :=
  thyex N Thy /\
  printstr "Unreduced theories\n" /\
  print_thy Thy /\ printstr "\n" /\
  reduce Thy Thy1 /\
  printstr "Reduced theories\n" /\
  print_thy Thy1 /\
  % ite? if then else
  _if (thy_consistent Thy1)
      (printstr " is consistent\n")
      (printstr " is not consistent\n").


